generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model KolWallet {
  address           String                @id
  curatedName       String                @map("curated_name")
  twitterHandle     String?               @map("twitter_handle")
  notes             String?
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime              @updatedAt @map("updated_at") @db.Timestamptz(6)
  pnlSnapshots      KolPnlSnapshot[]
  positions         KolPosition[]
  realizedPnlEvents KolRealizedPnlEvent[]
  tokenTransfers    KolTokenTransfer[]
  transactions      KolTransaction[]

  @@index([curatedName])
  @@map("kol_wallets")
}

model KolTransaction {
  signature      String             @id
  blockTime      DateTime           @map("block_time") @db.Timestamptz(6)
  slot           BigInt
  kolAddress     String             @map("kol_address")
  feeLamports    BigInt             @map("fee_lamports")
  wasSuccessful  Boolean            @default(true) @map("was_successful")
  programIds     String[]           @map("program_ids")
  computeUnits   BigInt?            @map("compute_units")
  metadataJson   Json?              @map("metadata_json")
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  tokenTransfers KolTokenTransfer[]
  kolWallet      KolWallet          @relation(fields: [kolAddress], references: [address])

  @@index([blockTime(sort: Desc)])
  @@index([kolAddress, blockTime(sort: Desc)])
  @@index([slot])
  @@map("kol_transactions")
}

model KolTokenTransfer {
  id                   BigInt         @id @default(autoincrement())
  transactionSignature String         @map("transaction_signature")
  blockTime            DateTime       @map("block_time") @db.Timestamptz(6)
  kolAddress           String         @map("kol_address")
  tokenMintAddress     String         @map("token_mint_address")
  amountChangeRaw      BigInt         @map("amount_change_raw")
  preBalanceRaw        BigInt         @map("pre_balance_raw")
  postBalanceRaw       BigInt         @map("post_balance_raw")
  usdValueAtTime       Decimal?       @map("usd_value_at_time") @db.Decimal(20, 8)
  instructionIndex     Int?           @map("instruction_index")
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  kolWallet            KolWallet      @relation(fields: [kolAddress], references: [address])
  transaction          KolTransaction @relation(fields: [transactionSignature], references: [signature])

  @@index([kolAddress, blockTime(sort: Desc)])
  @@index([tokenMintAddress, blockTime(sort: Desc)])
  @@map("kol_token_transfers")
}

model KolPosition {
  kolAddress         String    @map("kol_address")
  tokenMintAddress   String    @map("token_mint_address")
  currentBalanceRaw  BigInt    @map("current_balance_raw")
  totalCostBasisUsd  Decimal   @map("total_cost_basis_usd") @db.Decimal(20, 8)
  weightedAvgCostUsd Decimal   @map("weighted_avg_cost_usd") @db.Decimal(20, 8)
  unrealizedPnlUsd   Decimal?  @map("unrealized_pnl_usd") @db.Decimal(20, 8)
  lastUpdatedAt      DateTime  @default(now()) @map("last_updated_at") @db.Timestamptz(6)
  kolWallet          KolWallet @relation(fields: [kolAddress], references: [address])

  @@id([kolAddress, tokenMintAddress])
  @@index([kolAddress])
  @@index([tokenMintAddress])
  @@index([lastUpdatedAt])
  @@map("kol_positions")
}

model KolPnlSnapshot {
  kolAddress        String    @map("kol_address")
  period            String
  snapshotTimestamp DateTime  @default(now()) @map("snapshot_timestamp") @db.Timestamptz(6)
  realizedPnlUsd    Decimal   @map("realized_pnl_usd") @db.Decimal(20, 8)
  unrealizedPnlUsd  Decimal?  @map("unrealized_pnl_usd") @db.Decimal(20, 8)
  totalPnlUsd       Decimal   @map("total_pnl_usd") @db.Decimal(20, 8)
  roiPercentage     Decimal?  @map("roi_percentage") @db.Decimal(8, 4)
  winRate           Decimal?  @map("win_rate") @db.Decimal(5, 2)
  totalTrades       Int       @map("total_trades")
  totalVolumeUsd    Decimal?  @map("total_volume_usd") @db.Decimal(20, 8)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  kolWallet         KolWallet @relation(fields: [kolAddress], references: [address])

  @@id([kolAddress, period, snapshotTimestamp])
  @@index([period, totalPnlUsd(sort: Desc), snapshotTimestamp(sort: Desc)])
  @@index([period, totalVolumeUsd(sort: Desc), snapshotTimestamp(sort: Desc)])
  @@map("kol_pnl_snapshots")
}

model KolRealizedPnlEvent {
  id                          BigInt    @id @default(autoincrement())
  kolAddress                  String    @map("kol_address")
  tokenMintAddress            String    @map("token_mint_address")
  closingTransactionSignature String    @map("closing_transaction_signature")
  quantitySold                BigInt    @map("quantity_sold")
  saleValueUsd                Decimal   @map("sale_value_usd") @db.Decimal(20, 8)
  costBasisUsd                Decimal   @map("cost_basis_usd") @db.Decimal(20, 8)
  realizedPnlUsd              Decimal   @map("realized_pnl_usd") @db.Decimal(20, 8)
  holdDurationSeconds         Int?      @map("hold_duration_seconds")
  roiPercentage               Decimal?  @map("roi_percentage") @db.Decimal(8, 4)
  closedAt                    DateTime  @map("closed_at") @db.Timestamptz(6)
  createdAt                   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  kolWallet                   KolWallet @relation(fields: [kolAddress], references: [address])

  @@index([kolAddress, closedAt(sort: Desc)])
  @@index([tokenMintAddress, closedAt(sort: Desc)])
  @@map("kol_realized_pnl_events")
}

model DuneLeaderboardCache {
  period        String   @map("period")
  rank          Int      @map("rank")
  walletAddress String   @map("wallet_address")
  pnlUsd        Decimal  @map("pnl_usd") @db.Decimal(20, 8)
  winRate       Decimal? @map("win_rate") @db.Decimal(5, 2)
  totalTrades   Int?     @map("total_trades")
  notableWins   Json?    @map("notable_wins")
  lastUpdated   DateTime @default(now()) @map("last_updated") @db.Timestamptz(6)

  @@id([period, rank])
  @@index([period, rank])
  @@index([period, pnlUsd(sort: Desc)])
  @@index([lastUpdated])
  @@map("dune_leaderboard_cache")
}

model Token {
  mintAddress  String    @id @map("mint_address")
  symbol       String?
  name         String?
  decimals     Int?
  logoUri      String?   @map("logo_uri")
  coingeckoId  String?   @map("coingecko_id")
  isMemeToken  Boolean   @default(false) @map("is_meme_token")
  isVerified   Boolean   @default(false) @map("is_verified")
  launchDate   DateTime? @map("launch_date") @db.Timestamptz(6)
  metadataJson Json?     @map("metadata_json")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([symbol])
  @@index([isMemeToken])
  @@index([launchDate])
  @@map("tokens")
}

model GemsFeed {
  tokenMintAddress     String   @map("token_mint_address")
  discoveryTimestamp   DateTime @default(now()) @map("discovery_timestamp") @db.Timestamptz(6)
  numFamousBuyers      Int      @map("num_famous_buyers")
  famousBuyerAddresses String[] @map("famous_buyer_addresses")
  totalFamousVolumeUsd Decimal? @map("total_famous_volume_usd") @db.Decimal(20, 8)
  confidenceScore      Decimal  @map("confidence_score") @db.Decimal(3, 2)
  marketCapAtDiscovery Decimal? @map("market_cap_at_discovery") @db.Decimal(20, 8)
  isActive             Boolean  @default(true) @map("is_active")
  metadataJson         Json?    @map("metadata_json")

  @@id([tokenMintAddress, discoveryTimestamp])
  @@index([isActive, confidenceScore(sort: Desc), discoveryTimestamp(sort: Desc)])
  @@map("gems_feed")
}
